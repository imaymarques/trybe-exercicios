//                  PARTE 1:
// üöÄ 1. Altere as vari√°veis para respeitarem o escopo em que foram declaradas.
// * Modifique a estrutura da fun√ß√£o para que ela seja uma arrow function;
// * Modifique as vari√°veis para que respeitem o escopo onde est√£o declaradas;
// * Modifique as concatena√ß√µes para template literals.


const testingScope = (escopo) => {
    if (escopo === true) {
      let ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
      ifScope = `${ifScope} '√≥timo, fui utilizada no escopo!'`;
      console.log(ifScope);
    } else {
      const elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
      console.log(elseScope);
    }
  }

  testingScope(false);

  // üöÄ 2. Crie uma fun√ß√£o que retorne um array em ordem crescente.
// * Crie uma fun√ß√£o que fa√ßa com que o array oddsAndEvens fique na ordem crescente;
// * Utilize o console.log e template literals para retornar a frase: 'Os n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!'.
// * Utilize template literals para que a chamada console.log(<seu c√≥digo>oddsAndEvens<seu c√≥digo>); retorne a frase "Os n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!".
// * B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando o m√©todo array.sort(). Spoiler: √â poss√≠vel realizar uma fun√ß√£o que ordene qualquer array de n√∫meros.
  const oddsAndEvens = [13, 3, 4, 10, 7, 2];
  oddsAndEvens.sort((a,b) => a - b);
  console.log(`'Os n√∫meros ${oddsAndEvens} se encontram ordenados de forma crescente!'`);

  //                 PARTE 2:
//   1. Crie uma fun√ß√£o que receba um n√∫mero e retorne seu fatorial.
//   * Na matem√°tica, o fatorial de um n√∫mero inteiro e positivo N, representado por N!, √© o produto de todos os seus antecessores at√© o n√∫mero um. Exemplo: 4! = 4 * 3 * 2 * 1 = 24.

const fatorial = (num) => {
    if (num > 1) {
        return num * fatorial (num -1);
    }
    return num;
}

console.log(fatorial(5));

// Tenary Operator teste:
const contador = (10 + 20 === 50) ? `essa express√£o est√° correta` : `essa express√£o √© falsa`;
console.log(contador);

// 2. Crie uma fun√ß√£o que receba uma frase e retorne a maior palavra.
const longestWord = (text) => {
    let wordArray = text.split(' ');
    let biggest = 0;
    let result = '';
    for (const index of wordArray) {
        if (index.length > biggest) {
            biggest = index.length;
            result = index;
        }
    }
    return result;
}
console.log(longestWord('Antonio foi ao banheiro e n√£o sabemos o que aconteceu'));

// üöÄ 3. Crie uma p√°gina com um contador de cliques.
// Sua p√°gina deve conter:
// Um bot√£o ao qual ser√° associado um event listener;
// Uma vari√°vel clickCount no arquivo JavaScript que acumule o n√∫mero de clicks no bot√£o;
// Um campo no HTML que v√° atualizando a quantidade de clicks no bot√£o conforme a vari√°vel clickCount √© atualizada.

const getButton = document.getElementById('click');
const getP = document.getElementById('contador');
let clickCount = 0;
getButton.addEventListener('click', function() {
  clickCount += 1;
  if (clickCount === 1) {
    getP.innerHTML = `${clickCount} clique`;
  } else {
      getP.innerHTML = `${clickCount} cliques`;
    }
});
// FUN√á√ÉO 1:
// üöÄ 4. Crie duas fun√ß√µes JavaScript com as seguintes especifica√ß√µes:
// N√£o se esque√ßa de usar template literals
// Fun√ß√£o 1: Escreva uma fun√ß√£o que substitua a letra 'x' em uma frase.
// A fun√ß√£o dever√° receber um nome por par√¢metro;
// Declare dentro da fun√ß√£o uma vari√°vel com o nome frase, do tipo const e com o valor igual a 'Tryber x aqui!';
// A fun√ß√£o dever√° retornar uma nova frase onde o x da frase 'Tryber x aqui!' seja substitu√≠do pelo nome passado por par√¢metro.

const newPhrase = (nome) => {
  const frase = 'Tryber x aqui!';
  let resultado = frase.replace('x', nome);
  return resultado;
}
console.log(newPhrase('Mayara'));

// FUN√á√ÉO 2:
// Escreva uma fun√ß√£o que ir√° receber o retorno da Fun√ß√£o 1 por par√¢metro e retornar√° uma nova string.
// A fun√ß√£o dever√° receber o retorno da Fun√ß√£o 1 por par√¢metro;
// Declare dentro da fun√ß√£o uma vari√°vel com o nome skills, do tipo const;
// A vari√°vel skills dever√° ser um array contendo tr√™s strings com tecnologias que voc√™ j√° aprendeu.
// Concatene o valor retornado da Fun√ß√£o 1, a frase 'Minhas tr√™s principais habilidades s√£o:' e o valor da vari√°vel skills.

const newValue = (parametro) => {
  const skills = ['JavaScript', 'HTML', 'CSS'];
  let resultado = `${parametro}
  Minhas tr√™s principais habilidades s√£o:
  ${skills}`;
  return resultado;
}
console.log(newValue(newPhrase('Mayara')));